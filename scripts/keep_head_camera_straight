#!/usr/bin/env python
# license removed for brevity
import rospy

from sensor_msgs.msg import JointState
from intera_core_msgs.msg import HeadPanCommand

import threading
import json

class HeadControl(object):

    def __init__(self, name):
        self.name = name
        self._j0 = None
        self._j0_lock = threading.Lock()
        self.sub = rospy.Subscriber("{}/joint/states".format(self.name),JointState,self._joint_states_cb)
        self.pub = rospy.Publisher('{}/head_joint/command'.format(self.name), HeadPanCommand, queue_size=10)


    def _joint_states_cb(self, msg):
        with self._j0_lock:
            if 'right_j0' in msg.name:
                self._j0 = msg.position[1]

                head_joint_msg = HeadPanCommand()
                head_joint_msg.speed_ratio = 1.0
                head_joint_msg.pan_mode = 1
                head_joint_msg.target = -self._j0
                self.pub.publish(head_joint_msg)

                
    def run(self):

        rate = rospy.Rate(10)

        head_joint_msg = HeadPanCommand()
        head_joint_msg.speed_ratio = 1.0
        head_joint_msg.pan_mode = 1

        while not rospy.is_shutdown():
            do_pub=False
            with self._j0_lock:
                if self._j0 is not None:
                    head_joint_msg.target = -self._j0
                    do_pub=True
            self.pub.publish(head_joint_msg)
            rate.sleep()

if __name__ == '__main__':

    rospy.init_node('keep_head_camera_straight', anonymous=True)

    robot_name = rospy.get_param('~robot_name')

    try:
        head_control = HeadControl(robot_name)
        # head_control.run()
        rospy.spin()

    except rospy.ROSInterruptException:
        pass
